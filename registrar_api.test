<?php
// $Id$

/**
 * @file
 *   Simpletest tests for the registrar API
 *   This file does primarily provide some general code, registrar_dummy.test should implement actual tests of this API.
 */

/**
 * Base class for Registrar API test cases
 */
abstract class RegistrarAPITestCase extends DrupalWebTestCase {

  function setUp() {
    parent::setUp();
  }

  function tearDown() {
    parent::tearDown();
  }

  /**
   * Test registrar_api_check_domains through the default registrar.
   */
  function testAPICheckDomains() {
    $randomdomain = $this->randomDomainName(); 
    // Test a registered name
    $actual = registrar_api_check_domains(array('drupal.org', $randomdomain));
    $desired = array(
      'drupal.org' => array(
        'Domain' => 'drupal.org',
        'Available' => FALSE,
    ),
      $randomdomain => array(
        'Domain' => $randomdomain,
        'Available' => TRUE,
    /*
     'ErrorNo' => '',
     'Description' => '',
     */
    )
    );

    $this->assertEqual($actual, $desired, t('Testing check_domains on a registered and free domain name'));
  }

  /**
   * Test registrar_api_domains_getlist through the default registrar.
   */
  function testAPIDomainsGetlist() {
    // Test a registered name
    $actual = registrar_api_domains_getlist();
    $this->assertTrue(is_array($actual), t('registrar_api_domains_getlist returns an array'));

    // Do some basic check on the returned array formatting.
    foreach($actual as $key => $value) {
      $this->assertEqual($key, $value['Name'], 'Name attribute equal to array key');
    }
  }
  
  /**** Helper fuctions ******/
  
  /**
   * Define which registrar implementation is the default
   * @param $registrar_module
   */
  function setDefaultRegistrar($registrar_module) {
    variable_set('registrar_api_default_registrar', $registrar_module);
  }
  
  /**
   * Generate a random domainname, hopefully not already registred.
   * 
   * @return string Generated domain name
   */
  function randomDomainName() {
    $exts = array('.com', '.net', '.org');
    $ext = $exts[mt_rand(0, count($exts) - 1)];
    $domain = $this->randomName(12) . $ext;
    return $domain;
  }
  
  function getContacts() {
    // Use the contact info setup by user 1 for now
    global $db_prefix;
    // Reset the db prefix since simpletest changes this, this obviously
    // won't work for those who actually use a prefix.
    $tmp = $db_prefix;
    $db_prefix = '';
    $contacts = registrar_api_get_user_contacts(1);
    $db_prefix = $tmp;
    return $contacts;
  }
}


class GeneralRegistrarAPITestCase extends RegistrarAPITestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('General Registrar API tests'),
      'description' => t('Registrar API functionality.'),
      'group' => t('Registrar API'),
    );
  }

  // @todo Test setting the default registrar via /admin/settings/registrar_api

}

class RegistrarAPIUnitTestCase extends DrupalUnitTestCase {
  function getInfo() {

    return array(
    'name' => t('Registrar API Unit tests'),
    'description' => t('Tests for the Registrar API helper code.'),
    'group' => t('Registrar API'),
    );
  }

  /**
   * Test the workings of registrar_api_split_domain_name()
   */
  function testSplitDomainName() {
    $tests = array(
      'drupal.org' => array('drupal', 'org'),
      'example.com' => array('example', 'com'),
      'example-foo.com' => array('example-foo', 'com'),
      'examplecom' => array(), // Missing dot
    );

    foreach ($tests as $test => $expected) {
      $result = registrar_api_split_domain_name($test);
      $this->assertEqual($result, $expected);
    }
  }
}
