<?php
// $Id$

/**
 * @file
 *   simpletest tests for the registrar API
 */

define('NAMECHEAP_TEST_URL', 'https://api.sandbox.namecheap.com/xml.response');
define('NAMECHEAP_TEST_KEY', '');
define('NAMECHEAP_TEST_USER', '');

class RegistrarAPITestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Registrar API tests'),
      'description' => t('Registrar API functionality.'),
      'group' => t('Registrar API'),
    );
  }

  /**
   * Override the namecheap api settings so as to not accidentally run
   * tests on a production environment
   */
  function setUp() {
    parent::setUp();

    $this->temp_api_url = variable_get('namecheap_uri', '');
    $this->temp_api_key = variable_get('namecheap_api_key', '');
    $this->temp_api_user = variable_get('namecheap_api_user', '');

    variable_set('namecheap_uri', NAMECHEAP_TEST_URL);
    variable_set('namecheap_api_key', NAMECHEAP_TEST_KEY);
    variable_set('namecheap_api_user', NAMECHEAP_TEST_USER);
  }

  function tearDown() {
    variable_set('namecheap_uri', $this->temp_api_url);
    variable_set('namecheap_api_key', $this->temp_api_key);
    variable_set('namecheap_api_user', $this->temp_api_user);

    parent::tearDown();
  }

  function randomDomainName() {
    $exts = array('.com', '.net', '.org');
    $ext = $exts[mt_rand(0, count($exts) - 1)];
    $domain = $this->randomName(12, $prefix = 'registrar_api_') . $ext;
    $domain = str_replace("_", "-", $domain);
    return $domain;
  }

  function getContacts() {
    // Use the contact info setup by user 1 for now
    global $db_prefix;
    // Reset the db prefix since simpletest changes this, this obviously
    // won't work for those who actually use a prefix.
    $tmp = $db_prefix;
    $db_prefix = '';
    $contacts = registrar_api_get_user_contacts(1);
    $db_prefix = $tmp;
    return $contacts;
  }
}

class NamecheapAPITestCase extends RegistrarAPITestCase {

  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Namecheap API tests'),
      'description' => t('Test Namecheap.com API calls.'),
      'group' => t('Registrar API'),
    );
  }

  /**
   * Test domains_register
   */
  function testNamecheapAPICheckDomains() {
    // Test an a registered name
    $actual = namecheap_check_domains('namecheap.com');
    $desired = array(
      'namecheap.com' => array(
        'Domain' => 'namecheap.com',
        'Available' => 'false',
        'ErrorNo' => '',
        'Description' => '',
      )
    );

    $this->assertEqual($actual, $desired, t('Testing check_domains on a registered domain name'));

    // Test on an available domain
    $actual = namecheap_check_domains('thisisnotregdyet.com');
    $desired = array(
      'thisisnotregdyet.com' => array(
        'Domain' => 'thisisnotregdyet.com',
        'Available' => 'true',
        'ErrorNo' => '',
        'Description' => '',
      ),
    );

    $this->assertEqual($actual, $desired, t('Testing check_domains on an available domain name'));
  }

  function testNamecheapAPICreateDomain() {
    $domain = $this->randomDomainName();
    $contacts = $this->getContacts();
    $contacts = _registrar_api_convert_contacts($contacts['registrant'], $contacts['tech'], $contacts['admin'], $contacts['aux_billing']);

    $actual = namecheap_create_domain($domain, 1, $contacts['registrant'], $contacts['tech'], $contacts['admin'], $contacts['auxbilling']);

    $desired = array(
      'Domain' => $domain,
      'DomainID' => $actual['DomainID'],  // No way to guess some of these.
      'Registered' => 'true',
      'OrderId' => $actual['OrderID'],
      'TransactionId' => $actual['TransactionID'],
      'ChargedAmount' => $actual['ChargedAmount'],
    );

    $this->assertEqual($actual, $desired, t('Testing domain creation on %domain', array('%domain' => $domain)));
  }
}
