<?php

/**
 * @file
 * The registrar_api module provides basic API calls
 * to registrars with available API's
 */

define('REGISTRAR_API_IANA_TLDS_URL', 'http://data.iana.org/TLD/tlds-alpha-by-domain.txt');

/**
 * Implementation of hook_help().
 */
function registrar_api_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#name':
      return t('Registrar API');

    case 'admin/modules#description':
      return t("Connects to various domain registrar API's to allow domain registration and management through Drupal");

    case 'admin/help#registrar_api':
      return '<p>'. t("Connects to various domain registrar API's to allow domain registration and management through Drupal") .'</p>';
  }
}

/**
 * Implementation of hook_init().
 */
function registrar_api_init() {
  module_load_include('inc', 'registrar_api');
  module_load_include('inc', 'registrar_api', 'registrar_api.node');
}

/**
 * Implementation of hook_menu().
 */
function registrar_api_menu() {
  $items['registrar/company/autocomplete'] = array(
    'title' => 'Company name autocomplete',
    'page callback' => 'registrar_api_company_autocomplete',
    'access arguments' => array("create registrar_contact content"),
    'type' => MENU_CALLBACK,
    'file' => 'autocomplete.inc',
  );
  $items['registrar/handle/autocomplete'] = array(
    'title' => 'Handle autocomplete',
    'page callback' => 'registrar_api_handle_autocomplete',
    'access arguments' => array("create registrar_contact content"),
    'type' => MENU_CALLBACK,
    'file' => 'autocomplete.inc',
  );
  $items['user/%user/registrar_contacts'] = array(
    'title' => t('Registrar Contacts'),
    'page callback' => 'registrar_api_user_page',
    'page arguments' => array(1),
    'access callback' => '_registrar_api_user_tab_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/registrar_api'] = array(
    'title' => 'Registrar API Settings',
    'description' => 'Manage the registrar API settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrar_api_settings_form'),
    'access arguments' => array('access administration pages'),
  );
  $items['admin/settings/registrar_api/configure'] = array(
    'title' => 'Global',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/registrar_api/registrars'] = array(
    'title' => 'Registrars',
    'description' => 'Manage registrars settings',
    'access arguments' => array('access administration pages'),
    'page callback' => 't',
    'page arguments' => array(''),
    'type' => MENU_LOCAL_TASK,
  );
  $registrars = registrar_api_get_registrars();
  foreach ($registrars as $rname => $v) {
    $items['admin/settings/registrar_api/registrars/'. $rname] = array(
      'title' => $v['name'],
      'description' => $v['name'] .'Manage the registrar API settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array($rname .'_settings_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_LOCAL_TASK
    );
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function registrar_api_perm() {
  return array('create registrar_contact content', 'edit own registrar_contact content', 'manage contacts');
}

/**
 * Implementation of hook_access().
 */
function registrar_contact_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create registrar_contact content', $account);

    case 'update':
      return user_access('edit own registrar_contact content', $account) && ($account->uid == $node->uid) || user_access('manage contacts', $account);
  }
}

/**
 * Implementation of hook_theme().
 */
function registrar_api_theme() {
  return array(
    'registrar_api_settings_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Callback function for the registrar_api admin settings form.
 */
function registrar_api_settings_form() {
  $form = array();
  
  // Select available TLDs
  $tlds = variable_get('registrar_api_iana_tlds', FALSE);
  $form['iana'] = array(
    '#type' => 'fieldset',
    '#title' => t('Available TLDs'),
    '#collapsible' => TRUE,
    '#description' => t('Select the supported TLDs'),
  );
  if (!$tlds) {
    $form['iana']['msg'] = array(
      '#value' => t('To start using registrar API it\'s needed to download the TLDs database from <a href="@url">@url</a>', array('@url' => REGISTRAR_API_IANA_TLDS_URL)),
    );
    $form['iana']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Download IANA database now'
    );
    $form['#submit'] = array('registrar_api_settings_initialize');
    return $form;
  }

  $tlds_enabled = variable_get('registrar_api_iana_tlds_enabled', array());
  if (!empty($tlds_enabled)) {
    $form['iana']['#collapsed'] = TRUE;
  }
  $options = array_merge($tlds_enabled, $tlds);
  $form['iana']['tlds'] = array(
    '#type' => 'checkboxes',
    '#options' => $tlds,
    '#value' => $tlds_enabled
  );

  $form['registrars'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select registrars'),
    '#description' => t('Select the registrar to use by default and optionally a specific registrar per TLD.'),
    '#collapsible' => TRUE,
  );
  $registrars = registrar_api_get_registrars();
  $options = array();
  foreach ($registrars as $k => $v) {
    $options[$k] = $v['name'];
  }
  $default = variable_get('registrar_api_registrar_default', '');
  $form['registrars']['default_registrar'] = array(
    '#type' => 'select',
    '#title' => t('Default'),
    '#default_value' => $default,
    '#options' => $options,
  );
  
  $form['registrars']['tld_registrar'] = array(
    '#type' => 'item',
    '#tree' => TRUE,
  );
  $options = array_merge(array('' => t('Default')), $options);
  foreach ($tlds_enabled as $tld) {
    $items = array(
      'tld' => array('#value' => $tld),
      'registrar' => array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => variable_get('registrar_api_registrar_'.$tld, ''),
      ),
    );
    $form['registrars']['tld_registrar'][$tld] = $items;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration')
  );

  return $form;
}

/**
 * Return HTML for the registrar api settings form.
 */
function theme_registrar_api_settings_form($form) {
  if (isset($form['registrars'])) {
    $header = array(t('TLD'), t('Registrar'));
    $rows = array();
    foreach (element_children($form['registrars']['tld_registrar']) as $item) {
      if ($item == 'default') {
        continue;
      }
      $items = &$form['registrars']['tld_registrar'][$item];
      $rows[] = array(
        drupal_render($items['tld']),
        drupal_render($items['registrar']),
      );
    }
    $form['registrars']['table']['#value'] = theme('table', $header, $rows);
  }

  $output = drupal_render($form);
  return $output;
}

/**
 * Submit callback for the settings form when the list of TLDs is not available.
 */
function registrar_api_settings_initialize_tlds($form, $form_state) {
  $result = drupal_http_request(REGISTRAR_API_IANA_TLDS_URL);
  if ($result->code != 200) {
    form_error($form['iana'], $result->status_message);
  }
  $tlds = explode("\n", trim($result->data));
  array_shift($tlds);
  $tlds = drupal_map_assoc($tlds);
  variable_set('registrar_api_iana_tlds', $tlds);
}

/**
 * Submit callback.
 */
function registrar_api_settings_form_submit($form, $form_state) {
  $values = &$form_state['values'];

  $tlds = variable_get('registrar_api_iana_tlds', array());
  $enabled = array_intersect_assoc($tlds, $values['tlds']);
  variable_set('registrar_api_iana_tlds_enabled', $enabled);

  variable_set('registrar_api_registrar_default', $form_state);
  foreach ($values['tld_registrar'] as $tld => $value) {
    variable_set('registrar_api_registrar_'.$tld, $value['registrar']);
  }
}

/**
 * Provide a list of all available registrars
 */
function registrar_api_get_registrars() {
  return module_invoke_all('registrar_info');
}

/**
 * Split a domain name into it's TLD and name parts.
 *
 * @param string $domain_name
 */
function registrar_api_split_domain_name($domain_name) {
  $matches = array();
  preg_match('/(.*)\.(.*)$/', $domain_name, $matches);
  array_shift($matches);
  return $matches;
}

/**** Pages ****/
function registrar_api_user_page($user) {
  $result = db_query("
		SELECT * FROM {registrar_api_user_handles} handles 
			LEFT JOIN {registrar_api_contact} contact 
			ON (handles.nid = contact.nid)
				LEFT JOIN {node} node 
					ON (contact.nid = node.nid)
		WHERE  handles.uid = %d", $user->uid);
  $table_header = array('Handle', 'Contact name', 'Company');
  $table_data   = array();
  while ($contact = db_fetch_object($result)) {
    $attr = array('title' => _registrar_api_format_contact_info($contact));
    $table_data[] = array(l($contact->title, 'node/'. $contact->nid, array('attributes' => $attr)), _registrar_api_full_contact_name($contact), $contact->company_name);
  }
  return theme_table($table_header, $table_data);
}

/**** Private helper functions ****/

/**
 * This function returns a String with the full name of a contact
 * //TODO: convert to a theme function
 */
function _registrar_api_full_contact_name($contact) {
  return $contact->lastname .", ". $contact->firstname;
}

/**
 * //TODO: convert to a theme function
 */
function _registrar_api_format_contact_info($contact, $html = FALSE) {
  $data = _registrar_api_full_contact_name($contact) . ($html ? "<br/>" : "\n");
  $data .= $contact->company_name . ($html ? "<br/>" : "\n");
  return $data;
}

function _registrar_api_user_tab_access($account) {
  global $user;

  // You can view your own contacts
  if ($account->uid == $user->uid) {
    return TRUE;
  }

  // You can view all contacts if you have the administer contact privilege
  if (user_access('manage contacts')) {
    return TRUE;
  }
  return FALSE;
}

function _registrar_api_method() {
  $args = func_get_args();
  $method = array_shift($args);

  $registrar = variable_get('registrar_api_default_registrar', '');
  $method = $registrar .'_'. $method;

  return call_user_func_array($method, $args);
}

/**
 * Converts the keys in each contact array to it's CamelCase equivelant.
 * i.e. first_name => FirstName
 *
 * This is the format that namecheap needs the data to be in.
 */
function _registrar_api_convert_contacts($registrant, $tech, $admin, $auxbilling) {
  // Convert the contact details' keys to CamelCase
  $contact_copy = array(
    'registrant' => array(), 'tech' => array(),
    'admin' => array(), 'auxbilling' => array(),
  );

  foreach ($contact_copy as $type => $values) {
    foreach ($$type as $key => $value) {
      $newkey = str_replace('_', ' ', $key);
      $newkey = str_replace(' ', '', ucwords($newkey));
      $contact_copy[$type][$newkey] = $value;
    }
  }

  return $contact_copy;
}

function _registrar_api_convert_contacts_reverse($registrant, $tech, $admin, $aux_billing) {
  // Convert the contact details' keys from CamelCase to lower with _'s
  $field_map = array(
    'OrganizationName' => 'organization_name',
    'JobTitle' => 'job_title',
    'FirstName' => 'first_name',
    'LastName' => 'last_name',
    'Address1' => 'address1',
    'Address2' => 'address2',
    'City' => 'city',
    'StateProvince' => 'state_province',
    'StateProvinceChoice' => 'state_province_choice',
    'PostalCode' => 'postal_code',
    'Country' => 'country',
    'Phone' => 'phone',
    'Fax' => 'fax',
    'EmailAddress' => 'email_address',
    'PhoneExt' => 'phone_ext',
  );
  $contact_copy = array('registrant' => array(), 'tech' => array(), 'admin' => array(), 'aux_billing' => array());
  foreach ($contact_copy as $type => $values) {
    foreach ($$type as $key => $value) {
      $newkey = $field_map[$key];
      $contact_copy[$type][$newkey] = $value;
    }
  }

  return $contact_copy;
}

