<?php

/**
 * @file
 * The registrar_api module provides basic API calls
 * to registrars with available API's
 *
 * @todo Attach more fields to the user form.
 *    - Company name
 *    - First name
 *    - Last name
 * @todo Contact handlers should be able to manager their users
 *   This is also possible if you assign the groups right. A contact handler should
 *   be able to manage the group of his users.
 * @todo Map remote handlers to internal handlers
 */

define('REGISTRAR_API_IANA_TLDS_URL', 'http://data.iana.org/TLD/tlds-alpha-by-domain.txt');

/**
 * Implementation of hook_help().
 */
function registrar_api_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#name':
      return t('Registrar API');

    case 'admin/modules#description':
      return t("Connects to various domain registrar API's to allow domain registration and management through Drupal");

    case 'admin/help#registrar_api':
      return '<p>'. t("Connects to various domain registrar API's to allow domain registration and management through Drupal") .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function registrar_api_menu() {
  
  $items['check-domain'] = array(
    'title' => 'Check domain name',
    'description' => 'Check if your domain is free',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrar_api_check_domain_form'),
    'access arguments' => array('access content'),
  );

  $items['admin/config/services/registrar_api'] = array(
    'title' => 'Registrar API Settings',
    'description' => 'Manage the registrar API settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrar_api_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'registrar_api.admin.inc',
  );
  $items['admin/config/services/registrar_api/configure'] = array(
    'title' => 'Global',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'registrar_api.admin.inc',
  );
  $items['admin/config/services/registrar_api/registrars'] = array(
    'title' => 'Registrars',
    'description' => 'Manage registrars settings',
    'access arguments' => array('access administration pages'),
    'page callback' => 't',
    'page arguments' => array(''),
    'type' => MENU_LOCAL_TASK,
    'file' => 'registrar_api.admin.inc',
  );
  $items['admin/config/services/registrar_api/registrars/all'] = array(
    'title' => 'Registrars',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $registrars = registrar_api_get_registrars();
  foreach ($registrars as $rname => $v) {
    $items['admin/config/services/registrar_api/registrars/'. $rname] = array(
      'title' => $v['name'],
      'description' => $v['name'] .'Manage the registrar API settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('registrar_api_registrar_settings_form', $rname),
      'access arguments' => array('access administration pages'),
      'type' => MENU_LOCAL_TASK,
    );
  }

  $items['admin/content/domains'] = array(
    'title' => 'Domains',
    'description' => 'Display all the known domains',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrar_api_domain_overview'),
    'access arguments' => array('access administation pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'registrar_api.pages.inc',
  );
  return $items;
}

function registrar_api_check_domain_form($form, &$form_state) {
  $form['domain_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain name'),
    '#description' => t('Type the domain you want to check'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function registrar_api_check_domain_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  
  $domain = $values['domain_name'];
  $split = registrar_api_split_domain_name($domain);
  
  // the last part of the split should contain the TLDS
  dpm($split);
}

/**
 * Implementation of hook_permission().
 */
function registrar_api_permission() {
  return array(
    
  );
}

/**
 * Return the form for admin/settings/registrar_api/registrars/{RNAME}.
 *
 * Load the registrar specific form and extend it with items to set
 * default contacts' handlers.
 */
function registrar_api_registrar_settings_form($form, &$form_state, $rname) {
  // get all the available registrars
  $registrars = registrar_api_get_registrars();
  // get the registrar that is being requested
  $registrar = $registrars[$rname];
  
  $form_state['registrar'] = $registrar;
  
  // create the class based on the registrar settings
  $class_name = $registrar['registrar provider'];
  $provider = new $class_name;
  
  $provider->settingsForm($form, $form_state);
  
  return system_settings_form($form);
}

/**
 * Validate callback.
 */
function registrar_api_registrar_settings_form_validate($form, &$form_state) {
  
  // get all the available registrars
  $registrars = registrar_api_get_registrars();
  // get the registrar that is being requested
  $registrar = $registrars[$form_state['registrar']];
  
  // create the class based on the registrar settings
  $class_name = $registrar['registrar provider'];
  $provider = new $class_name;
  
  if (method_exists($provider, 'settingsFormValidate')) {
    $provider->settingsFormValidate($form, $form_state);
  }
}

/**
 * Provide a list of all available registrars
 */
function registrar_api_get_registrars() {
  return module_invoke_all('registrar_info');
}

/**
 * Split a domain name into it's TLD and name parts.
 *
 * @param string $domain_name
 */
function registrar_api_split_domain_name($domain_name) {
  $matches = array();
  preg_match('/(.*)\.(.*)$/', $domain_name, $matches);
  array_shift($matches);
  return $matches;
}

/**
 * Helper function to provide form elements for contact handles.
 *
 * The returned set of form elements depends on given parameters.
 */
function _registrar_api_domain_handles_form(&$node, $required = TRUE) {
  $form = array();
  $form['registrar_handle'] = array(
    '#type' => 'textfield',
    '#title' => t('Registrar handle'),
    '#required' => $required,
    '#size' => 60,
    '#autocomplete_path' => 'registrar/handle/autocomplete',
    '#maxlength' => 60,
    '#default_value' => isset($node->registrar_handle) ? $node->registrar_handle : ''
  );
  $form['adm_handle'] = array(
    '#type' => 'textfield',
    '#title' => t('Administrative handle'),
    '#required' => $required,
    '#size' => 60,
    '#autocomplete_path' => 'registrar/handle/autocomplete',
    '#maxlength' => 60,
    '#default_value' => isset($node->adm_handle) ? $node->adm_handle : ''
  );
  $form['tech_handle'] = array(
    '#type' => 'textfield',
    '#title' => t('Technical handle'),
    '#required' => $required,
    '#size' => 60,
    '#autocomplete_path' => 'registrar/handle/autocomplete',
    '#maxlength' => 60,
    '#default_value' => isset($node->tech_handle) ? $node->tech_handle : ''
  );
  return $form;
}

/**
 * Check if a nameserver is a valid hostname.
 */
function _registrar_api_check_valid_nameserver($ns) {
  // IP addresses are fine.
  // From http://www.blog.highub.com/regular-expression/php-regex-regular-expression/php-regex-validate-ip-address/
  $pattern = "/^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/";
  if (preg_match($pattern, $ns)) {
     return TRUE;
  }
  
  // Hostname.
  // TODO: see RFCs 952 and 1123. Also http://en.wikipedia.org/wiki/Hostname
  if (drupal_valid_http_host($ns)) {
    return TRUE;
  }

  return FALSE;  
}

/**
 * This function returns a String with the full name of a contact
 * //TODO: convert to a theme function
 */
function _registrar_api_full_contact_name($contact) {
  return $contact->lastname .", ". $contact->firstname;
}

/**
 * //TODO: convert to a theme function
 */
function _registrar_api_format_contact_info($contact, $html = FALSE) {
  $data = _registrar_api_full_contact_name($contact) . ($html ? "<br/>" : "\n");
  $data .= $contact->company_name . ($html ? "<br/>" : "\n");
  return $data;
}

function _registrar_api_user_tab_access($account) {
  global $user;

  // You can view your own contacts
  if ($account->uid == $user->uid) {
    return TRUE;
  }

  // You can view all contacts if you have the administer contact privilege
  if (user_access('manage contacts')) {
    return TRUE;
  }
  return FALSE;
}

function _registrar_api_method() {
  $args = func_get_args();
  $method = array_shift($args);

  $registrar = variable_get('registrar_api_default_registrar', '');
  $method = $registrar .'_'. $method;

  return call_user_func_array($method, $args);
}

/**
 * Converts the keys in each contact array to it's CamelCase equivelant.
 * i.e. first_name => FirstName
 *
 * This is the format that namecheap needs the data to be in.
 */
function _registrar_api_convert_contacts($registrant, $tech, $admin, $auxbilling) {
  // Convert the contact details' keys to CamelCase
  $contact_copy = array(
    'registrant' => array(), 'tech' => array(),
    'admin' => array(), 'auxbilling' => array(),
  );

  foreach ($contact_copy as $type => $values) {
    foreach ($$type as $key => $value) {
      $newkey = str_replace('_', ' ', $key);
      $newkey = str_replace(' ', '', ucwords($newkey));
      $contact_copy[$type][$newkey] = $value;
    }
  }

  return $contact_copy;
}

function _registrar_api_convert_contacts_reverse($registrant, $tech, $admin, $aux_billing) {
  // Convert the contact details' keys from CamelCase to lower with _'s
  $field_map = array(
    'OrganizationName' => 'organization_name',
    'JobTitle' => 'job_title',
    'FirstName' => 'first_name',
    'LastName' => 'last_name',
    'Address1' => 'address1',
    'Address2' => 'address2',
    'City' => 'city',
    'StateProvince' => 'state_province',
    'StateProvinceChoice' => 'state_province_choice',
    'PostalCode' => 'postal_code',
    'Country' => 'country',
    'Phone' => 'phone',
    'Fax' => 'fax',
    'EmailAddress' => 'email_address',
    'PhoneExt' => 'phone_ext',
  );
  $contact_copy = array('registrant' => array(), 'tech' => array(), 'admin' => array(), 'aux_billing' => array());
  foreach ($contact_copy as $type => $values) {
    foreach ($$type as $key => $value) {
      $newkey = $field_map[$key];
      $contact_copy[$type][$newkey] = $value;
    }
  }

  return $contact_copy;
}