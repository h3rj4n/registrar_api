<?php
// $Id$

/**
 * @file
 * The registrar_api module provides a basic user interface and api calls
 * to registrars with available APIs.
 */

/**
 * Implementation of hook_help().
 */
function registrar_api_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#name':
      return t('Registrar API');
    case 'admin/modules#description':
      return t("Connects to various domain registrar API's to allow domain registration and management through Drupal");
    case 'admin/help#registrar_api':
      return '<p>' . t("Connects to various domain registrar API's to allow domain registration and management through Drupal") . '</p>';
  }
}

/**
 * Implementation of hook_init().
 */
function registrar_api_init() {
  module_load_include('inc', 'registrar_api');
  module_load_include('inc', 'registrar_api', 'registrar_api.node');

  // Load all inc files in the includes folder
  $path = drupal_get_path('module', 'registrar_api') . '/includes/';
  $registrar_list = array();
  foreach (scandir($path) as $file) {
    if (substr($file, strlen($file) - 4) == '.inc') {
      $registrar = substr($file, 0, strlen($file) - 4);
      $registrar_list[$registrar] = $registrar;
      module_load_include('inc', 'registrar_api', "includes/$registrar");
    }
  }
  variable_set('registrar_api_registrars', $registrar_list);
}

/**
 * Implementation of hook_perm().
 */
function registrar_api_perm() {
  return array('register domains', 'edit own domains', 'manage domains');
}

/**
 * Implementation of hook_access().
 */
function registrar_api_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('register domains', $account);
    break;
    case 'update':
    case 'delete':
      return user_access('edit own domains', $account) && ($account->uid == $node->uid) || user_access('manage domains', $account);
    break;
  }
}

/**
 * Implementation of hook_menu().
 */
function registrar_api_menu() {
  global $user;

  $items = array();
  $items['registrar/test'] = array(
    'title' => t('registrar test url'),
    'page callback' => 'registrar_api_test',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/registrar_api'] = array(
    'title' => 'Registrar API Settings',
    'description' => 'Manage the registrar API settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrar_api_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function registrar_api_test() {
  // Testing function
}

/**
 * Callback function for the registrar_api admin settings form
 */
function registrar_api_admin() {
  $form = array();
  $registrars = variable_get('registrar_api_registrars', array());
  $form['registrar_api']['registrar_api_registrar'] = array(
    '#type' => 'select',
    '#title' => t('Select the registrar API to use'),
    '#default_value' => variable_get('registrar_api', ''),
    '#options' => $registrars,
  );

  // Load each registrars admin forms
  foreach ($registrars as $registrar) {
    $method = $registrar . '_admin_form';
    if (function_exists($method)) {
      $form += $$method();
    }
  }
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_theme().
 */
function registrar_api_theme() {
  return array(
    'registrar_api_contacts' => array(
      'arguments' => array('contacts' => NULL),
    ),
  );
}

/**** User Profile Form ****/

/**
 * Implementation of hook_user().
 */
function registrar_api_user($op, &$edit, &$account, $category = NULL) {
  // We only do updates if the user is not anonymous.
  switch ($op) {
    case 'categories':
      return array(
        'registrar_api' => array(
          'name' => 'registrar_api',
          'title' => t('Registrar Contact Info'),
          'weight' => 2,
        )
      );
      break;

    case 'delete':
      db_query("DELETE FROM {registrar_api_user} WHERE uid = %d", $account->uid);
      break;
    case 'form':
      return registrar_api_user_form($edit, $account, $category);
      break;
    case 'load':
      $account->registrar_contacts = registrar_api_get_user_contacts($user->uid);
      break;
    case 'update':
    case 'submit':
      registrar_api_user_update($edit, $account, $category);
      break;
  }
}

/**
 * Adds the contact forms to the user account form
 */
function registrar_api_user_form($edit, $user, $category = NULL) {
  $form = array();

  if ($category == 'registrar_api') {
    global $user;
    $form = _registrar_api_get_form("user", $user->uid);
  }

  return $form;
}

/**
 * Update the user information in the system, if the account is updated
 */
function registrar_api_user_update($edit, $user, $category = NULL) {
  if ($category != 'registrar_api') {
    return;
  }

  $uid = db_result(db_query("SELECT uid FROM {registrar_api_contact} " .
                            "WHERE uid = %d", $user->uid));

  $set_str = _registrar_api_get_set_str($edit);

  // INSERT or UPDATE?
  if ($uid == NULL) {
    db_query("INSERT INTO {registrar_api_contact} SET $set_str, uid = %d",
      $user->uid);
  }
  else {
    db_query("UPDATE {registrar_api_contact} SET $set_str WHERE uid = %d",
      $uid);
  }
}

/**** Misc utility functions ****/

function registrar_api_get_node_contacts($nid, $type = NULL) {
  $contacts = db_fetch_array(
    db_query("SELECT * FROM {registrar_api_node} WHERE nid = %d", $nid));
  return _registrar_api_contacts($contacts, $type);
}

function registrar_api_get_user_contacts($uid, $type = NULL) {
  $contacts = db_fetch_array(
    db_query("SELECT * FROM {registrar_api_contact} WHERE uid = %d", $uid));
  return _registrar_api_contacts($contacts, $type);
}

function _registrar_api_contacts($contacts, $type) {
  $contacts_array = array();
  if ($contacts == NULL) {
    return;
  }
  foreach ($contacts as $contact => $value) {
    list($content_type, $field) = explode('_', $contact, 2);
    if ($content_type == 'aux') {
      $content_type = 'aux_billing';
      $field = drupal_substr($field, 8);
    }
    elseif ($content_type == 'uid') {
      continue;
    }
    $contacts_array[$content_type][$field] = $value;
  }

  if (in_array($type, array('registrant', 'tech', 'admin', 'aux_billing'))) {
    return $contacts_array[$type];
  }
  else {
    return $contacts_array;
  }
}


/**** Private helper function ****/

/**
 * This function builds the db query set string for the 60 odd values that
 * need to be saved in the four different contact types.
 */
function _registrar_api_get_set_str($values) {
  // Build the set query
  $fields = array('first_name', 'last_name', 'organization_name', 'address1',
                  'address2', 'job_title', 'city', 'state_province',
                  'state_province_choice', 'postal_code', 'country', 'phone',
                  'phone_ext', 'fax', 'email_address');

  $set_arr = array();
  foreach ($fields as $field) {
    foreach (array('registrant', 'tech', 'admin', 'aux_billing') as $type) {
      $ftype = "registrar_api_" . $type;
      if (is_array($values)) {
        $set_arr[] = $type . '_' . $field . " = '" .
          db_escape_string($values[$ftype][$field]) . "'";
      }
      elseif (is_object($values)) {
        $vftype = $values->$ftype;
        $set_arr[] = $type . '_' . $field . " = '" .
          db_escape_string($vftype[$field]) . "'";
      }
      else {
        drupal_set_message("Error in values type in _registrar_api_get_set_str", 'error');
        return;
      }
    }
  }
  return implode(", ", $set_arr);
}

/**
 * Returns the contact form
 */
function _registrar_api_get_form($type, $id) {
  if ($type == "user") {
    $contacts = registrar_api_get_user_contacts($id);
  }
  elseif ($type == "node") {
    $contacts = registrar_api_get_node_contacts($id);
  }

  $form['registrar_api_registrant'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Registrant Contact'),
    '#tree'          => TRUE,
    '#collapsible'   => TRUE,
    '#collapsed'     => FALSE,
    '#weight'        => 1,
  );
  $form['registrar_api_registrant']['first_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('First Name'),
    '#maxlength'     => 255,
    '#default_value' => $contacts['registrant']['first_name'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['last_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Last Name'),
    '#maxlength'     => 255,
    '#default_value' => $contacts['registrant']['last_name'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['organization_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Organization Name'),
    '#maxlength'     => 255,
    '#default_value' => $contacts['registrant']['organization_name'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['address1'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Street Address'),
    '#maxlength'     => 255,
    '#default_value' => $contacts['registrant']['address1'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['address2'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Address 2'),
    '#maxlength'     => 255,
    '#default_value' => $contacts['registrant']['address2'],
    '#required'      => FALSE,
  );
  $form['registrar_api_registrant']['job_title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Job Title'),
    '#maxlength'     => 255,
    '#default_value' => $contacts['registrant']['job_title'],
    '#required'      => FALSE,
  );
  $form['registrar_api_registrant']['city'] = array(
    '#type'          => 'textfield',
    '#title'         => t('City'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['city'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['state_province'] = array(
    '#type'          => 'textfield',
    '#title'         => t('State / Prov'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['state_province'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['state_province_choice'] = array(
    '#type'          => 'textfield',
    '#title'         => t('State or Prov Choice'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['state_province_choice'],
    '#required'      => FALSE,
  );
  $form['registrar_api_registrant']['postal_code'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Zip / Postal Code'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['postal_code'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['country'] = array(
    '#type'          => 'select',
    '#title'         => t('Country'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['country'],
    '#options'       => _registrar_api_country_codes(),
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['phone'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone Number'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['phone'],
    '#required'      => TRUE,
  );
  $form['registrar_api_registrant']['phone_ext'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone Ext'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['phone_ext'],
    '#required'      => FALSE,
  );
  $form['registrar_api_registrant']['fax'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Fax'),
    '#maxlength'     => 50,
    '#default_value' => $contacts['registrant']['fax'],
    '#required'      => FALSE,
  );
  $form['registrar_api_registrant']['email_address'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Email'),
    '#maxlength'     => 255,
    '#default_value' => $contacts['registrant']['email_address'],
    '#required'      => TRUE,
  );

  // Build the recycling the registrant form information
  $other_contacts = array(
    'tech' => t('Tech Contact'),
    'admin' => t('Admin Contact'),
    'aux_billing' => t('Billing Contact'),
  );

  foreach ($other_contacts as $type => $title) {
    $rtype = "registrar_api_$type";
    $form[$rtype] = array(
      '#type'          => 'fieldset',
      '#title'         => $title,
      '#tree'          => TRUE,
      '#collapsible'   => TRUE,
      '#collapsed'     => TRUE,
      '#weight'        => 2,
    );

    foreach ($form['registrar_api_registrant'] as $field => $values) {
      if ($field[0] == '#') {
        continue;
      }

      $form[$rtype][$field] = array(
        '#type' => $values['#type'],
        '#title' => $values['#title'],
        '#maxlength' => $values['#maxlength'],
        '#default_value' => $contacts[$type][$field],
        '#required'      => $values['#required'],
      );
      if ($values['#type'] == 'select') {
        $form[$rtype][$field]['#options'] = $values['#options'];
      }      
    }
  }

  return $form;
}

/**
 * Returns an array of (country code, country) pairs.
 */
function _registrar_api_country_codes() {
  return array(
    'AF' => t('Afghanistan'),
    'AL' => t('Albania'),
    'DZ' => t('Algeria'),
    'AS' => t('American Samoa'),
    'AD' => t('Andorra'),
    'AO' => t('Angola'),
    'AI' => t('Anguilla'),
    'AQ' => t('Antarctica'),

    'AG' => t('Antigua and Barbuda'),
    'AR' => t('Argentina'),
    'AM' => t('Armenia'),
    'AW' => t('Aruba'),
    'AU' => t('Australia'),
    'AT' => t('Austria'),
    'AZ' => t('Azerbaijan'),
    'BS' => t('Bahamas'),
    'BH' => t('Bahrain'),

    'BD' => t('Bangladesh'),
    'BB' => t('Barbados'),
    'BY' => t('Belarus'),
    'BE' => t('Belgium'),
    'BZ' => t('Belize'),
    'BJ' => t('Benin'),
    'BM' => t('Bermuda'),
    'BT' => t('Bhutan'),
    'BO' => t('Bolivia'),

    'BA' => t('Bosnia and Herzegovina'),
    'BW' => t('Botswana'),
    'BV' => t('Bouvet Island'),
    'BR' => t('Brazil'),
    'BN' => t('Brunei Darussalam'),
    'BG' => t('Bulgaria'),
    'BF' => t('Burkina Faso'),
    'BI' => t('Burundi'),
    'KH' => t('Cambodia'),

    'CM' => t('Cameroon'),
    'CA' => t('Canada'),
    'CV' => t('Cape Verde'),
    'KY' => t('Cayman Islands'),
    'CF' => t('Central African Republic'),
    'TD' => t('Chad'),
    'CL' => t('Chile'),
    'CN' => t('China'),
    'CX' => t('Christmas Island'),

    'CC' => t('Cocos (Keeling) Islands'),
    'CO' => t('Colombia'),
    'KM' => t('Comoros'),
    'CG' => t('Congo'),
    'CK' => t('Cook Islands'),
    'CR' => t('Costa Rica'),
    'CI' => t('Cote D\'Ivoire'),
    'HR' => t('Croatia (Hrvatska)'),
    'CU' => t('Cuba'),

    'CY' => t('Cyprus'),
    'CZ' => t('Czech Republic'),
    'CS' => t('Czechoslovakia'),
    'DK' => t('Denmark'),
    'DJ' => t('Djibouti'),
    'DM' => t('Dominica'),
    'DO' => t('Dominican Republic'),
    'TP' => t('East Timor'),
    'EC' => t('Ecuador'),

    'EG' => t('Egypt'),
    'SV' => t('El Salvador'),
    'GQ' => t('Equatorial Guinea'),
    'ER' => t('Eritrea'),
    'EE' => t('Estonia'),
    'ET' => t('Ethiopia'),
    'FK' => t('Falkland Islands'),
    'FO' => t('Faroe Islands'),
    'FJ' => t('Fiji'),

    'FI' => t('Finland'),
    'FR' => t('France'),
    'FX' => t('France, Metropolitan'),
    'GF' => t('French Guiana'),
    'PF' => t('French Polynesia'),
    'TF' => t('French S Territories'),
    'GA' => t('Gabon'),
    'GM' => t('Gambia'),
    'GE' => t('Georgia'),

    'DE' => t('German'),
    'GH' => t('Ghana'),
    'GI' => t('Gibraltar'),
    'GB' => t('Great Britain (UK)'),
    'GR' => t('Greece'),
    'GL' => t('Greenland'),
    'GD' => t('Grenada'),
    'GP' => t('Guadeloupe'),
    'GU' => t('Guam'),

    'GT' => t('Guatemala'),
    'GN' => t('Guinea'),
    'GW' => t('Guinea-Bissau'),
    'GY' => t('Guyana'),
    'HT' => t('Haiti'),
    'HM' => t('Heard and McDonald Isls'),
    'HN' => t('Honduras'),
    'HK' => t('Hong Kong'),
    'HU' => t('Hungary'),

    'IS' => t('Iceland'),
    'IN' => t('India'),
    'ID' => t('Indonesia'),
    'IR' => t('Iran'),
    'IQ' => t('Iraq'),
    'IE' => t('Ireland'),
    'IL' => t('Israel'),
    'IT' => t('Italy'),
    'JM' => t('Jamaica'),

    'JP' => t('Japan'),
    'JO' => t('Jordan'),
    'KZ' => t('Kazakhstan'),
    'KE' => t('Kenya'),
    'KI' => t('Kiribati'),
    'KP' => t('Korea (North)'),
    'KR' => t('Korea (South)'),
    'KW' => t('Kuwait'),
    'KG' => t('Kyrgyzstan'),

    'LA' => t('Laos'),
    'LV' => t('Latvia'),
    'LB' => t('Lebanon'),
    'LS' => t('Lesotho'),
    'LR' => t('Liberia'),
    'LY' => t('Libya'),
    'LI' => t('Liechtenstein'),
    'LT' => t('Lithuania'),
    'LU' => t('Luxembourg'),

    'MO' => t('Macau'),
    'MK' => t('Macedonia'),
    'MG' => t('Madagascar'),
    'MW' => t('Malawi'),
    'MY' => t('Malaysia'),
    'MV' => t('Maldives'),
    'ML' => t('Mali'),
    'MT' => t('Malta'),
    'MH' => t('Marshall Islands'),

    'MQ' => t('Martinique'),
    'MR' => t('Mauritania'),
    'MU' => t('Mauritius'),
    'YT' => t('Mayotte'),
    'MX' => t('Mexico'),
    'FM' => t('Micronesia'),
    'MD' => t('Moldova'),
    'MC' => t('Monaco'),
    'MN' => t('Mongolia'),

    'ME' => t('Montenegro'),
    'MS' => t('Montserrat'),
    'MA' => t('Morocco'),
    'MZ' => t('Mozambique'),
    'MM' => t('Myanmar'),
    'NA' => t('Namibia'),
    'NR' => t('Nauru'),
    'NP' => t('Nepal'),
    'NL' => t('Netherlands'),

    'AN' => t('Netherlands Antilles'),
    'NT' => t('Neutral Zone'),
    'NC' => t('New Caledonia'),
    'NZ' => t('New Zealand'),
    'NI' => t('Nicaragua'),
    'NE' => t('Niger'),
    'NG' => t('Nigeria'),
    'NU' => t('Niue'),
    'NF' => t('Norfolk Island'),

    'MP' => t('Northern Mariana Isls'),
    'NO' => t('Norway'),
    'OM' => t('Oman'),
    'PK' => t('Pakistan'),
    'PW' => t('Palau'),
    'PA' => t('Panama'),
    'PG' => t('Papua New Guinea'),
    'PY' => t('Paraguay'),
    'PE' => t('Peru'),

    'PH' => t('Philippines'),
    'PN' => t('Pitcairn'),
    'PL' => t('Poland'),
    'PT' => t('Portugal'),
    'PR' => t('Puerto Rico'),
    'QA' => t('Qatar'),
    'RE' => t('Reunion'),
    'RO' => t('Romania'),
    'RU' => t('Russian Federation'),

    'RW' => t('Rwanda'),
    'KN' => t('Saint Kitts and Nevis'),
    'LC' => t('Saint Lucia'),
    'WS' => t('Samoa'),
    'SM' => t('San Marino'),
    'ST' => t('Sao Tome and Principe'),
    'SA' => t('Saudi Arabia'),
    'SN' => t('Senegal'),
    'SC' => t('Seychelles'),

    'SL' => t('Sierra Leone'),
    'SG' => t('Singapore'),
    'SK' => t('Slovak Republic'),
    'SI' => t('Slovenia'),
    'Sb' => t('Solomon Islands'),
    'SO' => t('Somalia'),
    'ZA' => t('South Africa'),
    'ES' => t('Spain'),
    'LK' => t('Sri Lanka'),

    'VC' => t('St Vincent'),
    'SH' => t('St. Helena'),
    'PM' => t('St. Pierre and Miquelon'),
    'SD' => t('Sudan'),
    'SR' => t('Suriname'),
    'SZ' => t('Swaziland'),
    'SE' => t('Sweden'),
    'CH' => t('Switzerland'),
    'SY' => t('Syria'),

    'TW' => t('Taiwan'),
    'TJ' => t('Tajikistan'),
    'TZ' => t('Tanzania'),
    'TH' => t('Thailand'),
    'TG' => t('Togo'),
    'TK' => t('Tokelau'),
    'TO' => t('Tonga'),
    'TT' => t('Trinidad and Tobago'),
    'TN' => t('Tunisia'),

    'TR' => t('Turkey'),
    'TM' => t('Turkmenistan'),
    'TC' => t('Turks and Caicos Islands'),
    'TV' => t('Tuvalu'),
    'UG' => t('Uganda'),
    'UA' => t('Ukraine'),
    'AE' => t('United Arab Emirates'),
    'UK' => t('United Kingdom'),
    'US' => t('United States'),

    'UY' => t('Uruguay'),
    'UM' => t('US Minor Outlying Isls'),
    'SU' => t('USSR (former)'),
    'UZ' => t('Uzbekistan'),
    'VU' => t('Vanuatu'),
    'VA' => t('Vatican City St'),
    'VE' => t('Venezuela'),
    'VN' => t('Viet Nam'),
    'VG' => t('Virgin Islands (British)'),

    'VI' => t('Virgin Islands (U.S.)'),
    'WF' => t('Wallis and Futuna Isls'),
    'EH' => t('Western Sahara'),
    'YE' => t('Yemen'),
    'YU' => t('Yugoslavia'),
    'ZR' => t('Zaire'),
    'ZM' => t('Zambia'),
    'ZW' => t('Zimbabwe'),
  );
}
