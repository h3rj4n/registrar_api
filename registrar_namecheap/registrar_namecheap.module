<?php

/**
 * @file
 * Namecheap API utility functions.
 */

function registrar_namecheap_registrar_info() {
  return array(
    'registrar_namecheap' => array(
      'name' => 'Namecheap',
      'description' => 'Namecheap domain registrar',
    ),
  );
}


function registrar_namecheap_settings_form() {
  $form = array();

  $form['registrar_namecheap'] = array(
    '#type' => 'fieldset',
    '#title' => t('Namecheap Registrar Settings'),
  );

  $form['registrar_namecheap']['registrar_namecheap_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Namecheap Service URL'),
    '#default_value' => variable_get('registrar_namecheap_uri', 'https://api.sandbox.namecheap.com/xml.response'),
    '#description' => t("i.e. https://api.sandbox.namecheap.com/xml.response"),
    '#required' => TRUE,
  );

  $form['registrar_namecheap']['registrar_namecheap_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Namecheap API key'),
    '#default_value' => variable_get('registrar_namecheap_api_key', ''),
    '#required' => TRUE,
  );

  $form['registrar_namecheap']['registrar_namecheap_api_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Namecheap API User'),
    '#default_value' => variable_get('registrar_namecheap_api_user', ''),
    '#description' => t("This is usually your regular namecheap username"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/* Domain API Functions */

/**
 *
 * @param: $domain_list
 *   Array of domains to check for the availability on. i.e.:
 *   Array('domain1.com', 'availabledomain.com', 'err.tld')
 *
 * @return array of domain availability status'
 *   Array (
 *   [domain1.com] => Array (
 *     [Domain] => domain1.com
 *     [Available] => false
 *     [ErrorNo] =>
 *     [Description] =>
 *   )
 *   [availabledomain.com] => Array (
 *     [Domain] => availabledomain.com
 *     [Available] => true
 *     [ErrorNo] =>
 *     [Description] =>
 *   )
 *   [err.tld] => Array (
 *     [Domain] => err.tld
 *     [Available] => error
 *     [ErrorNo] => 703
 *     [Description] => Timeout while waiting for server response
 *   )
 * )
 */
function registrar_namecheap_check_domains($domain_list) {
  // TODO: Retry on failed attempts
  $request = _registrar_namecheap_init_request('namecheap.domains.check');
  $request['DomainList'] = implode(',', $domain_list);
  $response = _registrar_namecheap_request($request);

  $sxml = new SimpleXMLElement($response);
  $attributes = array('Domain', 'Available', 'ErrorNo', 'Description');
  _registrar_namecheap_validate_response($sxml);
  $domains = _registrar_namecheap_xmlattr2array(
    $response,
    $sxml->CommandResponse->DomainCheckResult,
    $attributes,
    'Domain'
  );

  foreach ($domains as $domain) {
    if ($domain['Available'] == 'error') {
      $msg = t('Error checking domain availability on ') . $domain['Domain'];
      drupal_set_message($msg, 'error');
      watchdog('registrar_api', 'Error checking domain availability on %domain. Error #: %errornum, Error Msg: %message', array('%domain' => $domain['Domain'], '%errornum' => $domain['ErrorNo'], '%message' => $domain['Description']), WATCHDOG_ERROR);
    }
  }

  return ($domains);
}

/**
 *
 * Ways to trigger errors:
 * $domain = _ (500)
 * $domain = domain_with_underscores.com  (14)
 *
 */
function registrar_namecheap_create_domains($domain_name, $years, $registrant, $tech, $admin, $auxbilling, $nameservers = NULL) {
  // TODO: Add promotion code, and extended attributes for .us, .ca, etc.

  $request = _registrar_namecheap_init_request('namecheap.domains.create');
  $request['DomainName'] = $domain_name;
  $request['Years'] = $years;

  foreach ($registrant as $field => $value) {
    $request['Registrant'. $field] = $value;
  }
  foreach ($tech as $field => $value) {
    $request['Tech'. $field] = $value;
  }
  foreach ($admin as $field => $value) {
    $request['Admin'. $field] = $value;
  }
  foreach ($auxbilling as $field => $value) {
    $request['AuxBilling'. $field] = $value;
  }

  // TODO: Validate nameserver format
  if ($nameservers) {
    $request['Nameservers'] = $nameservers;
  }

  $response = _registrar_namecheap_request($request);
  $sxml = new SimpleXMLElement($response);
  _registrar_namecheap_validate_response($sxml);
  $attributes = array('Domain', 'DomainID', 'Registered', 'OrderId', 'TransactionId', 'ChargedAmount');
  $domain = _registrar_namecheap_xmlattr2array(
    $response,
    $sxml->CommandResponse->DomainCreateResult,
    $attributes
  );

  return $domain[0];
}

function registrar_namecheap_get_contacts($domain_name) {
  // TODO: Handle requests when the domain isn't in this users account

  $request = _registrar_namecheap_init_request('namecheap.domains.getContacts');
  $request['DomainName'] = $domain_name;
  $response = _registrar_namecheap_request($request);
  $sxml = new SimpleXMLElement($response);

  // Get the Domain details
  $attributes = array('Domain', 'sld', 'tld', 'domainnameid');
  $domain = _registrar_namecheap_xmlattr2array(
    $response,
    $sxml->CommandResponse->DomainContactsResult,
    $attributes
  );
  $domain = $domain[0];

  // Get the Registrant/Tech/Admin/AuxBilling Information
  $contacts = array(
    'Registrant' => array(),
    'Tech' => array(),
    'Admin' => array(),
    'AuxBilling' => array(),
  );

  $fields = array('OrganizationName', 'JobTitle', 'FirstName', 'LastName', 'Address1', 'Address2', 'City', 'StateProvince', 'StateProvinceChoice', 'PostalCode', 'Country', 'Phone', 'Fax', 'EmailAddress', 'PhoneExt');

  foreach ($contacts as $type => $data) {
    foreach ($fields as $field) {
      $contacts[$type][$field] = (string) $sxml->CommandResponse->DomainContactsResult->$type->$field;
    }
  }

  $contacts['domain'] = $domain;
  return ($contacts);
}

/**
 * Returns an array of domains.
 *
 * @todo change date format to iso?
 * @see registrar_api_domains_getlist()
 */
function registrar_namecheap_domains_getlist() {
  // TODO: Handle the case when there is no domains to list

  $request = _registrar_namecheap_init_request('namecheap.domains.getList');
  $response = _registrar_namecheap_request($request);

  $sxml       = new SimpleXMLElement($response);
  $attributes = array('ID', 'Name', 'User', 'Created', 'Expires', 'IsExpired');
  $domains    = _registrar_namecheap_xmlattr2array(
    $response,
    $sxml->CommandResponse->DomainGetListResult->Domain,
    $attributes,
    'Name'
  );

  return ($domains);
}

function registrar_namecheap_domains_getregistrarlock() {
  /* Placeholder */
}

function registrar_namecheap_domains_reactivate() {
  /* Placeholder */
}

/**
 * At the time of writing this, the renew functionality in the API sandbox
 * did not work
 */
function registrar_namecheap_renew_domain($domain_name, $years) {
  // TODO: Add promotion code field
  // <Error Number="1">Unknown</Error>
  $request = _registrar_namecheap_init_request('namecheap.domains.renew');
  $request['DomainName'] = $domain_name;
  $request['Years'] = $years;

  $response = _registrar_namecheap_request($request);

  $sxml = new SimpleXMLElement($response);
  $attributes = array('DomainName', 'DomainID', 'Renew', 'OrderID', 'TransactionID', 'ChargedAmount');
  $domain = _registrar_namecheap_xmlattr2array(
    $response,
    $sxml->CommandResponse->DomainRenewResult,
    $attributes
  );

  return ($domain[0]);
}

function registrar_namecheap_set_contacts($domain_name, $registrant, $tech, $admin, $auxbilling) {
  // TODO: Implement extended attributes required for some cctlds

  $request = _registrar_namecheap_init_request('namecheap.domains.setcontacts');
  $request['DomainName'] = $domain_name;

  foreach ($registrant as $field => $value) {
    $request['Registrant'. $field] = $value;
  }
  foreach ($tech as $field => $value) {
    $request['Tech'. $field] = $value;
  }
  foreach ($admin as $field => $value) {
    $request['Admin'. $field] = $value;
  }
  foreach ($auxbilling as $field => $value) {
    $request['AuxBilling'. $field] = $value;
  }

  $response = _registrar_namecheap_request($request);
  $sxml = new SimpleXMLElement($response);

  $attributes = array('Domain', 'IsSuccess');
  $domain = _registrar_namecheap_xmlattr2array(
    $response,
    $sxml->CommandResponse->DomainSetContactResult,
    $attributes
  );

  return $domain[0];
}

function registrar_namecheap_domains_setregistrarlock() {
  /* Placeholder */
}

/**** Utility Functions ****/
function _registrar_namecheap_init_request($command, $username = NULL) {
  if (!$username) {
    $username = variable_get('registrar_namecheap_api_user', '');
  }
  $request = array(
    'ApiUser' => variable_get('registrar_namecheap_api_user', ''),
    'ApiKey' => variable_get('registrar_namecheap_api_key', ''),
    'UserName' => $username,
    'ClientIP' => $_SERVER['REMOTE_ADDR'],
    'command' => $command,
  );
  return $request;
}

function _registrar_namecheap_request($request) {
  // TODO: Handle request timeouts and other failures
  $request_arr = array();
  foreach ($request as $field => $value) {
    $request_arr[] .= urlencode($field) ."=". urlencode($value);
  }
  $request_str = variable_get('registrar_namecheap_uri', '') ."?". implode("&", $request_arr);

  $f = @fopen($request_str, "r");
  $response = stream_get_contents($f);
  fclose($f);

  return $response;
}

/**
 *
 * Builds and array out of a list of xml elements and their attributes.
 * Doesn't use any data that may be in the element, attributes only.
 *
 * $response - the xml response string
 * $attributes - the attributes who's values should be returned
 * $index - which attribute to index the returned array with, if not used then
 *          it will default to a numeric index.
 *
 */
function _registrar_namecheap_xmlattr2array($response, $sxml_obj, $attributes, $index = NULL) {
  $data = array();

  if (!$sxml_obj) {
    // On some errors the CommandResponse paramater won't be set
    watchdog('registrar_api', 'Invalid CommandResponse passed to _registrar_namecheap_xmlattr2array', array(), WATCHDOG_ERROR);
    return $data;
  }

  foreach ($sxml_obj as $xrecord) {
    $record = array();
    foreach ($attributes as $attribute) {
      $record[$attribute] = (string) $xrecord[$attribute];
    }
    if (!$index) {
      $data[] = $record;
    }
    else {
      $data[$record[$index]] = $record;
    }
  }

  return ($data);
}

/**
 *
 * @return false if there is an error status, true otherwise
 */
function _registrar_namecheap_validate_response($sxml) {
  // Is the status "ERROR"?
  $status = (string) $sxml->ApiResponse['Status'];
  $error = $status != "ERROR";

  $command = (string) $sxml->RequestedCommand;
  foreach ($sxml->Errors as $error) {
    if (!((string) $error->Error)) {
      continue;
    }
    $errnum = (string) $error->Error['Number'];
    $errmsg = (string) $error->Error;
    $msg    = t('Error in namecheap API: %command - Error #: %errnum, Error Msg: %errmsg', array('%command' => $command, '%errnum' => $errnum, '%errmsg' => $errmsg));
    drupal_set_message($msg, 'error');
    watchdog('registrar_api', $msg, array(), WATCHDOG_ERROR);
  }
  return $error;
}

/**
 * Known API Errors (these don't seem to be recorded on their wiki anywhere)
 *
 *   1 - Unknown
 *   2 - Parameter <param> is Missing
 *
 *  14 - The domain name, <domain.tld> is invalid.
 * 500 - An unhandled exception occured. Please try again.
 */

/**
 * Known API Status's
 *   OK
 *   ERROR
 */

